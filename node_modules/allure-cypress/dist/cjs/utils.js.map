{"version":3,"file":"utils.js","names":["_allureJsCommons","require","_sdk","_model","_state","uint8ArrayToBase64","data","u8arrayLike","Array","isArray","buffer","btoa","String","fromCharCode","apply","exports","getSuitePath","test","path","currentSuite","parent","title","unshift","shouldCommandBeSkipped","command","_last","last","attributes","args","log","name","ALLURE_REPORT_STEP_COMMAND","toReversed","arr","result","i","length","push","isGlobalHook","hookName","getNamesAndLabels","spec","rawName","cleanTitle","labels","extractMetadataFromString","suites","titlePath","slice","fullName","concat","relative","join","applyTestPlan","root","testPlan","getAllureTestPlan","suiteQueue","s","shift","indicesToRemove","getIndicesOfDeselectedTests","tests","removeSortedIndices","resolveStatusWithDetails","error","status","getStatusFromError","statusDetails","getMessageAndTraceFromError","Status","PASSED","testReportedKey","Symbol","markTestAsReported","isTestReported","hookTypeRegexp","getHookType","match","exec","includedInTestPlan","allureId","some","_test$id","id","toString","selector","forEach","index","_labels$find","find","_ref","LabelName","ALLURE_ID","value","indices","splice"],"sources":["../../src/utils.ts"],"sourcesContent":["import { LabelName, Status } from \"allure-js-commons\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, getStatusFromError } from \"allure-js-commons/sdk\";\nimport type { TestPlanV1 } from \"allure-js-commons/sdk\";\nimport { ALLURE_REPORT_STEP_COMMAND } from \"./model.js\";\nimport type { CypressCommand, HookPosition, HookScopeType, HookType } from \"./model.js\";\nimport { getAllureTestPlan } from \"./state.js\";\n\nexport const uint8ArrayToBase64 = (data: unknown) => {\n  // @ts-ignore\n  const u8arrayLike = Array.isArray(data) || data.buffer;\n\n  if (!u8arrayLike) {\n    return data as string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return btoa(String.fromCharCode.apply(null, data as number[]));\n};\n\nexport const getSuitePath = (test: Mocha.Test): string[] => {\n  const path: string[] = [];\n  let currentSuite: Mocha.Suite | undefined = test.parent;\n\n  while (currentSuite) {\n    if (currentSuite.title) {\n      path.unshift(currentSuite.title);\n    }\n\n    currentSuite = currentSuite.parent;\n  }\n\n  return path;\n};\n\nexport const shouldCommandBeSkipped = (command: CypressCommand) => {\n  if (last(command.attributes.args)?.log === false) {\n    return true;\n  }\n\n  if (command.attributes.name === \"task\" && command.attributes.args[0] === \"reportAllureRuntimeMessages\") {\n    return true;\n  }\n\n  // we don't need to report then commands because it's just a promise handle\n  if (command.attributes.name === \"then\") {\n    return true;\n  }\n\n  // we should skip artificial wrap from allure steps\n  if (command.attributes.name === \"wrap\" && command.attributes.args[0] === ALLURE_REPORT_STEP_COMMAND) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const toReversed = <T = unknown>(arr: T[]): T[] => {\n  const result: T[] = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    result.push(arr[i]);\n  }\n\n  return result;\n};\n\nexport const isGlobalHook = (hookName: string) => {\n  return /(before|after) all/.test(hookName);\n};\n\nexport const last = <T = unknown>(arr: T[]): T | undefined => {\n  return arr[arr.length - 1];\n};\n\nexport const getNamesAndLabels = (spec: Cypress.Spec, test: Mocha.Test) => {\n  const rawName = test.title;\n  const { cleanTitle: name, labels } = extractMetadataFromString(rawName);\n  const suites = test.titlePath().slice(0, -1);\n  const fullName = `${spec.relative}#${[...suites, name].join(\" \")}`;\n  return { name, labels, fullName };\n};\n\nexport const applyTestPlan = (spec: Cypress.Spec, root: Mocha.Suite) => {\n  const testPlan = getAllureTestPlan();\n  if (testPlan) {\n    const suiteQueue = [];\n    for (let s: Mocha.Suite | undefined = root; s; s = suiteQueue.shift()) {\n      const indicesToRemove = getIndicesOfDeselectedTests(testPlan, spec, s.tests);\n      removeSortedIndices(s.tests, indicesToRemove);\n      suiteQueue.push(...s.suites);\n    }\n  }\n};\n\nexport const resolveStatusWithDetails = (error: Error | undefined) =>\n  error\n    ? {\n        status: getStatusFromError(error),\n        statusDetails: getMessageAndTraceFromError(error),\n      }\n    : { status: Status.PASSED };\n\nconst testReportedKey = Symbol(\"The test was reported to Allure\");\n\nexport const markTestAsReported = (test: Mocha.Test) => {\n  (test as any)[testReportedKey] = true;\n};\n\nexport const isTestReported = (test: Mocha.Test) => (test as any)[testReportedKey] === true;\n\nconst hookTypeRegexp = /^\"(before|after) (all|each)\"/;\n\nexport const getHookType = (name: string): HookType | [] => {\n  const match = hookTypeRegexp.exec(name);\n  if (match) {\n    return [match[1] as HookPosition, match[2] as HookScopeType];\n  }\n  return [];\n};\n\nconst includedInTestPlan = (testPlan: TestPlanV1, fullName: string, allureId: string | undefined): boolean =>\n  testPlan.tests.some((test) => (allureId && test.id?.toString() === allureId) || test.selector === fullName);\n\nconst getIndicesOfDeselectedTests = (testPlan: TestPlanV1, spec: Cypress.Spec, tests: readonly Mocha.Test[]) => {\n  const indicesToRemove: number[] = [];\n  tests.forEach((test, index) => {\n    const { fullName, labels } = getNamesAndLabels(spec, test);\n    const allureId = labels.find(({ name }) => name === LabelName.ALLURE_ID)?.value;\n\n    if (!includedInTestPlan(testPlan, fullName, allureId)) {\n      indicesToRemove.push(index);\n    }\n  });\n  return indicesToRemove;\n};\n\nconst removeSortedIndices = <T>(arr: T[], indices: readonly number[]) => {\n  for (let i = indices.length - 1; i >= 0; i--) {\n    arr.splice(indices[i], 1);\n  }\n};\n"],"mappings":"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","ignoreList":[]}