{"version":3,"file":"reporter.js","names":["_nodePath","_interopRequireDefault","require","_allureJsCommons","_reporter","_utils","_excluded","e","__esModule","default","ownKeys","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","i","_objectWithoutPropertiesLoose","n","indexOf","propertyIsEnumerable","call","hasOwnProperty","_classPrivateFieldInitSpec","a","_checkPrivateRedeclaration","set","has","TypeError","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","_endAllSpecs","WeakMap","_applyAllureCypressMessages","_startRun","_startSuite","_stopSuite","_startHook","_stopHook","_startTest","_failTestOrHook","_passTest","_skipTest","_stopTest","_startCommand","_stopCommand","_applyRuntimeApiMessages","_emitPreviousTestScope","_resolveRootUuid","_attachSpecVideo","_emitRemainingScopes","_initializeSpecContext","AllureCypress","constructor","config","undefined","Map","on","reportAllureCypressSpecMessages","args","reportFinalAllureCypressSpecMessages","endSpec","absolutePath","onAfterSpec","onAfterRun","spec","results","_results$video","absolute","video","endRun","allureRuntime","writeEnvironmentInfo","writeCategoriesDefinitions","specAbsolutePath","cypressVideoPath","specContext","specContextByAbsolutePath","delete","_ref","messages","message","type","context","_ref2","data","name","root","scope","startScope","suiteScopes","suiteNames","_ref3","pop","writeScope","_ref4","start","hookPosition","hookScopeType","getHookType","isEach","isAfterEach","testScope","last","fixture","startFixture","status","_ref5","duration","fixtureUuid","updateFixture","_fixture$status","Status","PASSED","stopFixture","_ref6","fullName","labels","metadataLabels","test","startTest","stage","Stage","RUNNING","LabelName","LANGUAGE","FRAMEWORK","getSuiteLabels","getEnvironmentLabels","videoScope","_ref7","statusDetails","setError","result","assign","testUuid","updateTest","failed","testResult","SKIPPED","_ref8","retries","parameters","toString","excluded","FINISHED","stopTest","writeTest","_ref9","rootUuid","stepUuid","startStep","map","arg","j","concat","commandSteps","_ref10","stop","updateStep","stopStep","applyRuntimeMessages","_context$fixture","shouldVideoBeAttached","videoOnFailOnly","writeAttachment","contentType","ContentType","MP4","specPathElements","path","relative","process","cwd","split","sep","specPath","join","package","resultsDir","rest","ReporterRuntime","writer","createDefaultWriter","exports","getInitialSpecState","initialized","testPlan","parseTestPlan","enableTestPlan","env","allure","allureCypress","cypressConfig","allureConfig","allureCypressReporter","attachToCypress"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport path from \"node:path\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  AllureCypressTaskArgs,\n  AllureSpecState,\n  CypressCommandEndMessage,\n  CypressCommandStartMessage,\n  CypressFailMessage,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressSuiteEndMessage,\n  CypressSuiteStartMessage,\n  CypressTestEndMessage,\n  CypressTestStartMessage,\n  SpecContext,\n} from \"./model.js\";\nimport { getHookType, last } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  specContextByAbsolutePath = new Map<string, SpecContext>();\n  videoOnFailOnly: boolean = false;\n\n  constructor(config: AllureCypressConfig = {}) {\n    const { resultsDir, videoOnFailOnly = false, ...rest } = config;\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...rest,\n    });\n  }\n\n  attachToCypress = (on: Cypress.PluginEvents) => {\n    on(\"task\", {\n      reportAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        return null;\n      },\n      reportFinalAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        this.endSpec(args.absolutePath);\n        return null;\n      },\n    });\n\n    // Emits the remaining fixtures and writes the video of the spec.\n    // In interactive mode it's invoked through the `reportFinalAllureCypressSpecMessages` task.\n    on(\"after:spec\", this.onAfterSpec);\n\n    // Emits the categories and env info. Doesn't work in interactive mode unless\n    // `experimentalInteractiveRunEvents` is set.\n    on(\"after:run\", this.onAfterRun);\n  };\n\n  /**\n   * Forward the `after:spec` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param spec The first argument of the `after:spec` event.\n   * @param results The second argument of the `after:spec` event.\n   * @example\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:spec\", (spec, results) => {\n   *       allureReporter.onAfterSpec(spec, results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   */\n  onAfterSpec = (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n    this.endSpec(spec.absolute, results.video ?? undefined);\n  };\n\n  /**\n   * Forward the `after:run` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param results The argument of the `after:run` event.\n   * @example\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:run\", (results) => {\n   *       allureReporter.onAfterRun(results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onAfterRun = (results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult) => {\n    this.endRun();\n  };\n\n  endRun = () => {\n    this.#endAllSpecs();\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  };\n\n  endSpec = (specAbsolutePath: string, cypressVideoPath?: string) => {\n    const specContext = this.specContextByAbsolutePath.get(specAbsolutePath);\n    if (specContext) {\n      this.#attachSpecVideo(specContext, cypressVideoPath);\n      this.#emitRemainingScopes(specContext);\n      this.specContextByAbsolutePath.delete(specAbsolutePath);\n    }\n  };\n\n  #endAllSpecs = () => {\n    for (const specAbsolutePath of this.specContextByAbsolutePath.keys()) {\n      this.endSpec(specAbsolutePath);\n    }\n  };\n\n  #applyAllureCypressMessages = ({ messages, absolutePath }: AllureCypressTaskArgs) => {\n    messages.forEach((message) => {\n      if (message.type === \"cypress_run_start\") {\n        this.#startRun(absolutePath);\n        return;\n      }\n\n      const context = this.specContextByAbsolutePath.get(absolutePath);\n      if (!context) {\n        return;\n      }\n\n      switch (message.type) {\n        case \"cypress_suite_start\":\n          this.#startSuite(context, message);\n          break;\n        case \"cypress_suite_end\":\n          this.#stopSuite(context, message);\n          break;\n        case \"cypress_hook_start\":\n          this.#startHook(context, message);\n          break;\n        case \"cypress_hook_end\":\n          this.#stopHook(context, message);\n          break;\n        case \"cypress_test_start\":\n          this.#startTest(context, message);\n          break;\n        case \"cypress_test_pass\":\n          this.#passTest(context);\n          break;\n        case \"cypress_fail\":\n          this.#failTestOrHook(context, message);\n          break;\n        case \"cypress_test_skip\":\n          this.#skipTest(context);\n          break;\n        case \"cypress_test_end\":\n          this.#stopTest(context, message);\n          break;\n        case \"cypress_command_start\":\n          this.#startCommand(context, message);\n          break;\n        case \"cypress_command_end\":\n          this.#stopCommand(context, message);\n          break;\n        default:\n          this.#applyRuntimeApiMessages(context, message);\n          break;\n      }\n    });\n  };\n\n  #startRun = (absolutePath: string) => {\n    // This function is executed once on `cypress run`, but it can be executed\n    // multiple times during an interactive session (`cypress open`). Ideally,\n    // in that case, we should remove previous result objects that haven't been\n    // written yet, but it would've required support in ReporterRuntime.\n    // Currently, we're discarding the entire spec context.\n    this.#initializeSpecContext(absolutePath);\n  };\n\n  #startSuite = (context: SpecContext, { data: { name, root } }: CypressSuiteStartMessage) => {\n    const scope = this.allureRuntime.startScope();\n    context.suiteScopes.push(scope);\n    if (!root) {\n      this.#emitPreviousTestScope(context);\n      context.suiteNames.push(name);\n    }\n  };\n\n  #stopSuite = (context: SpecContext, { data: { root } }: CypressSuiteEndMessage) => {\n    this.#emitPreviousTestScope(context);\n    if (!root) {\n      context.suiteNames.pop();\n    }\n    const scope = context.suiteScopes.pop();\n    if (scope) {\n      this.allureRuntime.writeScope(scope);\n    }\n  };\n\n  #startHook = (context: SpecContext, { data: { name, start } }: CypressHookStartMessage) => {\n    const [hookPosition, hookScopeType] = getHookType(name);\n    if (hookPosition) {\n      const isEach = hookScopeType === \"each\";\n      const isAfterEach = hookPosition === \"after\" && isEach;\n      if (!isAfterEach) {\n        this.#emitPreviousTestScope(context);\n      }\n\n      const scope = isEach ? context.testScope : last(context.suiteScopes);\n      if (scope) {\n        context.fixture = this.allureRuntime.startFixture(scope, hookPosition, {\n          name,\n          start,\n          status: undefined,\n        });\n      }\n    }\n  };\n\n  #stopHook = (context: SpecContext, { data: { duration } }: CypressHookEndMessage) => {\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, (fixture) => {\n        fixture.status ??= Status.PASSED;\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { duration });\n      context.fixture = undefined;\n    }\n  };\n\n  #startTest = (\n    context: SpecContext,\n    { data: { name, fullName, start, labels: metadataLabels } }: CypressTestStartMessage,\n  ) => {\n    this.#emitPreviousTestScope(context);\n    const testScope = this.allureRuntime.startScope();\n    context.testScope = testScope;\n    context.test = this.allureRuntime.startTest(\n      {\n        name,\n        start,\n        fullName,\n        stage: Stage.RUNNING,\n        labels: [\n          {\n            name: LabelName.LANGUAGE,\n            value: \"javascript\",\n          },\n          {\n            name: LabelName.FRAMEWORK,\n            value: \"cypress\",\n          },\n          ...getSuiteLabels(context.suiteNames),\n          ...metadataLabels,\n          ...getEnvironmentLabels(),\n        ],\n      },\n      [context.videoScope, ...context.suiteScopes, testScope],\n    );\n  };\n\n  #failTestOrHook = (context: SpecContext, { data: { status, statusDetails } }: CypressFailMessage) => {\n    const setError = (result: object) => Object.assign(result, { status, statusDetails });\n\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, setError);\n    }\n\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, setError);\n    }\n\n    context.failed = true;\n  };\n\n  #passTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.PASSED;\n      });\n    }\n  };\n\n  #skipTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.SKIPPED;\n        testResult.statusDetails = { message: \"The test was skipped\" };\n      });\n    }\n  };\n\n  #stopTest = (context: SpecContext, { data: { retries, duration } }: CypressTestEndMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        if (retries > 0) {\n          testResult.parameters.push({\n            name: \"Retry\",\n            value: retries.toString(),\n            excluded: true,\n          });\n        }\n        testResult.stage = Stage.FINISHED;\n      });\n      this.allureRuntime.stopTest(testUuid, { duration });\n      this.allureRuntime.writeTest(testUuid);\n      context.test = undefined;\n    }\n  };\n\n  #startCommand = (context: SpecContext, { data: { name, args } }: CypressCommandStartMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      const stepUuid = this.allureRuntime.startStep(rootUuid, undefined, {\n        name,\n        parameters: args.map((arg, j) => ({\n          name: `Argument [${j}]`,\n          value: arg,\n        })),\n      });\n      if (stepUuid) {\n        context.commandSteps.push(stepUuid);\n      }\n    }\n  };\n\n  #stopCommand = (context: SpecContext, { data: { status, statusDetails, stop } }: CypressCommandEndMessage) => {\n    const stepUuid = context.commandSteps.pop();\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        r.status = status;\n\n        if (statusDetails) {\n          r.statusDetails = statusDetails;\n        }\n      });\n      this.allureRuntime.stopStep(stepUuid, { stop });\n    }\n  };\n\n  #applyRuntimeApiMessages = (context: SpecContext, message: RuntimeMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      this.allureRuntime.applyRuntimeMessages(rootUuid, [message]);\n    }\n  };\n\n  /**\n   * We must defer emitting a test's scope until we receive all the test's `afterEach` hooks.\n   * At the same time, we should report it as early as we can. That means we should call this\n   * method in the following cases:\n   * - when an `after` hook of the test starts (`after` hooks are called later than `afterEach`)\n   * - when a `before` or `beforeEach` hook of the next test starts (in case the next test has `before`/`beforeEach` hooks)\n   * - when the next test start (in case the next test doesn't have `before`/`beforeEach` hooks)\n   * - when the test's suite ends (in case the test is the last one in its suite, including the root suite of the spec)\n   * - when a nested suite starts\n   * - when the spec ends\n   */\n  #emitPreviousTestScope = (context: SpecContext) => {\n    const testScope = context.testScope;\n\n    // Checking the test allows us to tell `beforeEach` and `afterEach` apart.\n    // Here we're interested in `afterEach` only.\n    if (!context.test && testScope) {\n      this.allureRuntime.writeScope(testScope);\n      context.testScope = undefined;\n    }\n  };\n\n  #resolveRootUuid = (context: SpecContext) => context.fixture ?? context.test;\n\n  #attachSpecVideo = (context: SpecContext, cypressVideoPath?: string) => {\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || context.failed) && cypressVideoPath;\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(context.videoScope, \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n      this.allureRuntime.writeScope(context.videoScope);\n    }\n  };\n\n  #emitRemainingScopes = (context: SpecContext) => {\n    this.#emitPreviousTestScope(context);\n    context.suiteScopes.forEach((scope) => {\n      this.allureRuntime.writeScope(scope);\n    });\n  };\n\n  #initializeSpecContext = (absolutePath: string) => {\n    const specPathElements = path.relative(process.cwd(), absolutePath).split(path.sep);\n    const context = {\n      specPath: specPathElements.join(\"/\"),\n      package: specPathElements.join(\".\"),\n      test: undefined,\n      fixture: undefined,\n      commandSteps: [],\n      videoScope: this.allureRuntime.startScope(),\n      suiteScopes: [],\n      testScope: undefined,\n      suiteNames: [],\n      failed: false,\n    };\n    this.specContextByAbsolutePath.set(absolutePath, context);\n  };\n}\n\nconst getInitialSpecState = (): AllureSpecState => ({\n  initialized: false,\n  messages: [],\n  testPlan: parseTestPlan(),\n});\n\n/**\n * Explicitly enables the selective run feature.\n * @param config The Cypress configuration.\n */\nexport const enableTestPlan = (config: Cypress.PluginConfigOptions) => {\n  config.env.allure = getInitialSpecState();\n  return config;\n};\n\n/**\n * Sets up Allure Cypress.\n * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).\n * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.\n * @param allureConfig An Allure configuration object (optional).\n * @example\n * import { defineConfig } from \"cypress\";\n * import { allureCypress } from \"allure-cypress/reporter\";\n *\n * export default defineConfig({\n *   e2e: {\n *     setupNodeEvents: (on, config) => {\n *       allureCypress(on, config, { videoOnFailOnly: true });\n *       return config;\n *     },\n *     // ...\n *   }\n * });\n */\nexport const allureCypress = (\n  on: Cypress.PluginEvents,\n  cypressConfig?: Cypress.PluginConfigOptions,\n  allureConfig?: AllureCypressConfig,\n) => {\n  // Backward compatibility; mainly for JS users who have no type hints\n  if (!allureConfig && cypressConfig && !(\"env\" in cypressConfig)) {\n    allureConfig = cypressConfig as AllureCypressConfig;\n  }\n\n  const allureCypressReporter = new AllureCypress(allureConfig);\n  allureCypressReporter.attachToCypress(on);\n\n  if (cypressConfig && \"env\" in cypressConfig) {\n    enableTestPlan(cypressConfig);\n  }\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}