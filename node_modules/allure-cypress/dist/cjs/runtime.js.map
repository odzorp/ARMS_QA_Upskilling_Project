{"version":3,"file":"runtime.js","names":["_allureJsCommons","require","_sdk","_runtime","_model","_state","_utils","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classPrivateFieldInitSpec","a","_checkPrivateRedeclaration","set","has","TypeError","_toPropertyKey","value","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","n","_moveMessagesToAllureCypressTask","WeakMap","_resetMessages","_enqueueMessageAsync","_dequeueAllMessages","AllureCypressTestRuntime","constructor","taskName","messages","cy","task","absolutePath","Cypress","spec","absolute","log","Promise","resolve","setRuntimeMessages","message","enqueueRuntimeMessage","getRuntimeMessages","labels","_len","Array","_key","type","data","links","_len2","_key2","parameter","name","options","parameters","description","markdown","descriptionHtml","html","displayName","historyId","testCaseId","attachment","content","attachmentRawContent","actualEncoding","attachmentContent","uint8ArrayToBase64","encoding","contentType","fileExtension","attachmentFromPath","path","logStep","status","undefined","Status","PASSED","error","wrap","ALLURE_REPORT_STEP_COMMAND","then","start","Date","now","stop","statusDetails","getMessageAndTraceFromError","step","body","result","stepDisplayName","stepParameter","mode","exports","initTestRuntime","setGlobalTestRuntime","getTestRuntime","getGlobalTestRuntime","flushRuntimeMessages","flushMessages","flushFinalRuntimeMessages","flushFinalMessages","reportRunStart","reportSuiteStart","suite","title","root","parent","reportSuiteEnd","reportHookStart","hook","reportHookEnd","_hook$duration","duration","reportTestStart","test","flag","_test$wallClockStarte","x","getNamesAndLabels","wallClockStartedAt","getTime","markTestAsReported","reportUnfinishedSteps","runtimeMessages","unfinishedStepsMessages","getUnfinishedStepsMessages","reportTestPass","reportTestSkip","isTestReported","reportUnfinishedCommand","SKIPPED","reportCommandStart","command","concat","attributes","args","map","arg","JSON","stringify","reportCommandEnd","reportScreenshot","ContentType","PNG","startCommandMessageIdx","toReversed","findIndex","_ref","stopCommandMessageIdx","_ref2","hasUnfinishedCommand","reportTestOrHookFail","err","getStatusFromError","reportTestEnd","_test$duration","_retries","retries","forwardDescribeCall","target","_len3","_key3","configOrFn","fn","patchDescribe","incSuiteDepth","decSuiteDepth","patchDescribeFn","originalDescribeFn","globalThis","describe","patchedDescribe","only","skip","createSuiteDepthCounterState","suiteDepth","patchAfter","getSuiteDepth","originalAfter","after","patchedAfter","nameOrFn","ALLURE_REPORT_SYSTEM_HOOK","enableScopeLevelAfterHookReporting"],"sources":["../../src/runtime.ts"],"sourcesContent":["import { ContentType, Status } from \"allure-js-commons\";\nimport type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions, StatusDetails } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError, getUnfinishedStepsMessages } from \"allure-js-commons/sdk\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type {\n  CypressCommand,\n  CypressCommandEndMessage,\n  CypressMessage,\n  CypressSuiteFunction,\n  CypressTest,\n} from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND, ALLURE_REPORT_SYSTEM_HOOK } from \"./model.js\";\nimport { enqueueRuntimeMessage, getRuntimeMessages, setRuntimeMessages } from \"./state.js\";\nimport { getNamesAndLabels, isTestReported, markTestAsReported, uint8ArrayToBase64 } from \"./utils.js\";\n\nexport class AllureCypressTestRuntime implements TestRuntime {\n  constructor() {\n    this.#resetMessages();\n  }\n\n  labels(...labels: Label[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  // @ts-ignore\n  attachment(name: string, content: string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const actualEncoding = typeof attachmentRawContent === \"string\" ? \"utf8\" : \"base64\";\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.#enqueueMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.#enqueueMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  logStep(name: string, status: Status = Status.PASSED, error?: Error) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve();\n      })\n      .then(() => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: status,\n            stop: Date.now(),\n            statusDetails: error ? { ...getMessageAndTraceFromError(error) } : undefined,\n          },\n        });\n      });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        }).then(() => result);\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        name,\n      },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  flushMessages = (): PromiseLike<void> => this.#moveMessagesToAllureCypressTask(\"reportAllureCypressSpecMessages\");\n\n  flushFinalMessages = (): PromiseLike<void> =>\n    this.#moveMessagesToAllureCypressTask(\"reportFinalAllureCypressSpecMessages\");\n\n  #moveMessagesToAllureCypressTask = (taskName: string) => {\n    const messages = this.#dequeueAllMessages();\n    return messages.length\n      ? cy.task(taskName, { absolutePath: Cypress.spec.absolute, messages }, { log: false })\n      : Cypress.Promise.resolve();\n  };\n\n  #resetMessages = () => setRuntimeMessages([]);\n\n  #enqueueMessageAsync = (message: CypressMessage): PromiseLike<void> => {\n    enqueueRuntimeMessage(message);\n    return Cypress.Promise.resolve();\n  };\n\n  #dequeueAllMessages = () => {\n    const messages = getRuntimeMessages();\n    this.#resetMessages();\n    return messages;\n  };\n}\n\nexport const initTestRuntime = () => setGlobalTestRuntime(new AllureCypressTestRuntime() as TestRuntime);\n\nexport const getTestRuntime = () => getGlobalTestRuntime() as AllureCypressTestRuntime;\n\nexport const flushRuntimeMessages = () => getTestRuntime().flushMessages();\n\nexport const flushFinalRuntimeMessages = () => getTestRuntime().flushFinalMessages();\n\nexport const reportRunStart = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_run_start\",\n    data: {},\n  });\n};\n\nexport const reportSuiteStart = (suite: Mocha.Suite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_start\",\n    data: {\n      name: suite.title,\n      root: !suite.parent,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportSuiteEnd = (suite: Mocha.Suite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_end\",\n    data: {\n      root: !suite.parent,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportHookStart = (hook: Mocha.Hook) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_start\",\n    data: {\n      name: hook.title,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportHookEnd = (hook: Mocha.Hook) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_end\",\n    data: {\n      duration: hook.duration ?? 0,\n    },\n  });\n};\n\nexport const reportTestStart = (test: CypressTest, flag?: string) => {\n  const x = getNamesAndLabels(Cypress.spec, test);\n  if (flag) {\n    x.labels.push({ name: \"reported\", value: flag });\n  }\n  enqueueRuntimeMessage({\n    type: \"cypress_test_start\",\n    data: {\n      ...x,\n      start: test.wallClockStartedAt?.getTime() || Date.now(),\n    },\n  });\n  markTestAsReported(test);\n};\n\nexport const reportUnfinishedSteps = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages() as RuntimeMessage[];\n  const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages);\n  unfinishedStepsMessages.forEach(() => {\n    enqueueRuntimeMessage({\n      type: \"step_stop\",\n      data: {\n        stop: Date.now(),\n        status,\n        statusDetails,\n      },\n    });\n  });\n};\n\nexport const reportTestPass = () => {\n  reportUnfinishedSteps(Status.PASSED);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_pass\",\n    data: {},\n  });\n};\n\nexport const reportTestSkip = (test: CypressTest) => {\n  if (isTestReported(test)) {\n    reportUnfinishedCommand(Status.SKIPPED, {\n      message: \"The test was skipped before the command was completed\",\n    });\n  } else {\n    reportTestStart(test);\n  }\n\n  enqueueRuntimeMessage({\n    type: \"cypress_test_skip\",\n    data: {},\n  });\n};\n\nexport const reportCommandStart = (command: CypressCommand) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_start\",\n    data: {\n      name: `Command \"${command.attributes.name}\"`,\n      args: command.attributes.args.map((arg) => (typeof arg === \"string\" ? arg : JSON.stringify(arg, null, 2))),\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportCommandEnd = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_end\",\n    data: {\n      status: Status.PASSED,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportScreenshot = (path: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"attachment_path\",\n    data: {\n      path: path,\n      name: name || \"Screenshot\",\n      contentType: ContentType.PNG,\n    },\n  });\n};\n\nexport const reportUnfinishedCommand = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages();\n  const startCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_start\");\n  const stopCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_end\");\n  const hasUnfinishedCommand = startCommandMessageIdx > stopCommandMessageIdx;\n\n  const data: CypressCommandEndMessage[\"data\"] = { status, stop: Date.now() };\n  if (statusDetails) {\n    data.statusDetails = statusDetails;\n  }\n\n  if (hasUnfinishedCommand) {\n    enqueueRuntimeMessage({ type: \"cypress_command_end\", data });\n  }\n};\n\nexport const reportTestOrHookFail = (err: Error) => {\n  const status = getStatusFromError(err);\n  const statusDetails = getMessageAndTraceFromError(err);\n\n  reportUnfinishedCommand(status, statusDetails);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_fail\",\n    data: {\n      status,\n      statusDetails,\n    },\n  });\n};\n\nexport const reportTestEnd = (test: CypressTest) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_test_end\",\n    data: {\n      duration: test.duration ?? 0,\n      retries: (test as any)._retries ?? 0,\n    },\n  });\n};\n\nconst forwardDescribeCall = (target: CypressSuiteFunction, ...args: Parameters<CypressSuiteFunction>) => {\n  const [title, configOrFn, fn] = args;\n  if (typeof fn === \"undefined\" && typeof configOrFn === \"undefined\") {\n    return target(title);\n  } else if (typeof configOrFn === \"function\") {\n    return target(title, configOrFn);\n  } else {\n    return target(title, configOrFn, fn);\n  }\n};\n\nconst patchDescribe = (incSuiteDepth: () => void, decSuiteDepth: () => void) => {\n  const patchDescribeFn =\n    (target: CypressSuiteFunction): CypressSuiteFunction =>\n    (title, configOrFn, fn) => {\n      incSuiteDepth();\n      try {\n        return forwardDescribeCall(target, title, configOrFn, fn);\n      } finally {\n        decSuiteDepth();\n      }\n    };\n  const originalDescribeFn: Mocha.SuiteFunction = globalThis.describe;\n  const patchedDescribe = patchDescribeFn(originalDescribeFn) as Mocha.SuiteFunction;\n  patchedDescribe.only = patchDescribeFn(\n    originalDescribeFn.only as CypressSuiteFunction,\n  ) as Mocha.ExclusiveSuiteFunction;\n  patchedDescribe.skip = patchDescribeFn(originalDescribeFn.skip as CypressSuiteFunction) as Mocha.PendingSuiteFunction;\n  globalThis.describe = patchedDescribe;\n};\n\nconst createSuiteDepthCounterState = (): [get: () => number, inc: () => void, dec: () => void] => {\n  let suiteDepth = 0;\n  return [\n    () => suiteDepth,\n    () => {\n      suiteDepth++;\n    },\n    () => {\n      suiteDepth--;\n    },\n  ];\n};\n\nconst patchAfter = (getSuiteDepth: () => number) => {\n  const originalAfter = globalThis.after;\n  const patchedAfter = (nameOrFn: string | Mocha.Func | Mocha.AsyncFunc, fn?: Mocha.Func | Mocha.AsyncFunc): void => {\n    try {\n      return typeof nameOrFn === \"string\" ? originalAfter(nameOrFn, fn) : originalAfter(nameOrFn);\n    } finally {\n      if (getSuiteDepth() === 0) {\n        originalAfter(ALLURE_REPORT_SYSTEM_HOOK, () => {\n          flushRuntimeMessages();\n        });\n      }\n    }\n  };\n  globalThis.after = patchedAfter;\n};\n\n/**\n * Patches the `after` function, to inject an extra `after` hook after each spec-level\n * `after` hook defined by the user.\n */\nexport const enableScopeLevelAfterHookReporting = () => {\n  const [getSuiteDepth, incSuiteDepth, decSuiteDepth] = createSuiteDepthCounterState();\n  patchDescribe(incSuiteDepth, decSuiteDepth);\n  patchAfter(getSuiteDepth);\n};\n"],"mappings":"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","ignoreList":[]}