"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportUnfinishedSteps = exports.reportUnfinishedCommand = exports.reportTestStart = exports.reportTestSkip = exports.reportTestPass = exports.reportTestOrHookFail = exports.reportTestEnd = exports.reportSuiteStart = exports.reportSuiteEnd = exports.reportScreenshot = exports.reportRunStart = exports.reportHookStart = exports.reportHookEnd = exports.reportCommandStart = exports.reportCommandEnd = exports.initTestRuntime = exports.getTestRuntime = exports.flushRuntimeMessages = exports.flushFinalRuntimeMessages = exports.enableScopeLevelAfterHookReporting = exports.AllureCypressTestRuntime = void 0;
var _allureJsCommons = require("allure-js-commons");
var _sdk = require("allure-js-commons/sdk");
var _runtime = require("allure-js-commons/sdk/runtime");
var _model = require("./model.js");
var _state = require("./state.js");
var _utils = require("./utils.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _moveMessagesToAllureCypressTask = /*#__PURE__*/new WeakMap();
var _resetMessages = /*#__PURE__*/new WeakMap();
var _enqueueMessageAsync = /*#__PURE__*/new WeakMap();
var _dequeueAllMessages = /*#__PURE__*/new WeakMap();
class AllureCypressTestRuntime {
  constructor() {
    _defineProperty(this, "flushMessages", () => _classPrivateFieldGet(_moveMessagesToAllureCypressTask, this).call(this, "reportAllureCypressSpecMessages"));
    _defineProperty(this, "flushFinalMessages", () => _classPrivateFieldGet(_moveMessagesToAllureCypressTask, this).call(this, "reportFinalAllureCypressSpecMessages"));
    _classPrivateFieldInitSpec(this, _moveMessagesToAllureCypressTask, taskName => {
      var messages = _classPrivateFieldGet(_dequeueAllMessages, this).call(this);
      return messages.length ? cy.task(taskName, {
        absolutePath: Cypress.spec.absolute,
        messages
      }, {
        log: false
      }) : Cypress.Promise.resolve();
    });
    _classPrivateFieldInitSpec(this, _resetMessages, () => (0, _state.setRuntimeMessages)([]));
    _classPrivateFieldInitSpec(this, _enqueueMessageAsync, message => {
      (0, _state.enqueueRuntimeMessage)(message);
      return Cypress.Promise.resolve();
    });
    _classPrivateFieldInitSpec(this, _dequeueAllMessages, () => {
      var messages = (0, _state.getRuntimeMessages)();
      _classPrivateFieldGet(_resetMessages, this).call(this);
      return messages;
    });
    _classPrivateFieldGet(_resetMessages, this).call(this);
  }
  labels() {
    for (var _len = arguments.length, labels = new Array(_len), _key = 0; _key < _len; _key++) {
      labels[_key] = arguments[_key];
    }
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        labels
      }
    });
  }
  links() {
    for (var _len2 = arguments.length, links = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      links[_key2] = arguments[_key2];
    }
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        links
      }
    });
  }
  parameter(name, value, options) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        parameters: [_objectSpread({
          name,
          value
        }, options)]
      }
    });
  }
  description(markdown) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        description: markdown
      }
    });
  }
  descriptionHtml(html) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        descriptionHtml: html
      }
    });
  }
  displayName(name) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        displayName: name
      }
    });
  }
  historyId(value) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        historyId: value
      }
    });
  }
  testCaseId(value) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "metadata",
      data: {
        testCaseId: value
      }
    });
  }

  // @ts-ignore
  attachment(name, content, options) {
    // @ts-ignore
    var attachmentRawContent = (content === null || content === void 0 ? void 0 : content.type) === "Buffer" ? content.data : content;
    var actualEncoding = typeof attachmentRawContent === "string" ? "utf8" : "base64";
    var attachmentContent = (0, _utils.uint8ArrayToBase64)(attachmentRawContent);
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "attachment_content",
      data: {
        name,
        content: attachmentContent,
        encoding: actualEncoding,
        contentType: options.contentType,
        fileExtension: options.fileExtension
      }
    });
  }
  attachmentFromPath(name, path, options) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "attachment_path",
      data: {
        name,
        path,
        contentType: options.contentType,
        fileExtension: options.fileExtension
      }
    });
  }
  logStep(name) {
    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _allureJsCommons.Status.PASSED;
    var error = arguments.length > 2 ? arguments[2] : undefined;
    return cy.wrap(_model.ALLURE_REPORT_STEP_COMMAND, {
      log: false
    }).then(() => {
      _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
        type: "step_start",
        data: {
          name,
          start: Date.now()
        }
      });
      return Cypress.Promise.resolve();
    }).then(() => {
      return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
        type: "step_stop",
        data: {
          status: status,
          stop: Date.now(),
          statusDetails: error ? _objectSpread({}, (0, _sdk.getMessageAndTraceFromError)(error)) : undefined
        }
      });
    });
  }
  step(name, body) {
    return cy.wrap(_model.ALLURE_REPORT_STEP_COMMAND, {
      log: false
    }).then(() => {
      _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
        type: "step_start",
        data: {
          name,
          start: Date.now()
        }
      });
      return Cypress.Promise.resolve(body());
    }).then(result => {
      return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
        type: "step_stop",
        data: {
          status: _allureJsCommons.Status.PASSED,
          stop: Date.now()
        }
      }).then(() => result);
    });
  }
  stepDisplayName(name) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "step_metadata",
      data: {
        name
      }
    });
  }
  stepParameter(name, value, mode) {
    return _classPrivateFieldGet(_enqueueMessageAsync, this).call(this, {
      type: "step_metadata",
      data: {
        parameters: [{
          name,
          value,
          mode
        }]
      }
    });
  }
}
exports.AllureCypressTestRuntime = AllureCypressTestRuntime;
var initTestRuntime = () => (0, _runtime.setGlobalTestRuntime)(new AllureCypressTestRuntime());
exports.initTestRuntime = initTestRuntime;
var getTestRuntime = () => (0, _runtime.getGlobalTestRuntime)();
exports.getTestRuntime = getTestRuntime;
var flushRuntimeMessages = () => getTestRuntime().flushMessages();
exports.flushRuntimeMessages = flushRuntimeMessages;
var flushFinalRuntimeMessages = () => getTestRuntime().flushFinalMessages();
exports.flushFinalRuntimeMessages = flushFinalRuntimeMessages;
var reportRunStart = () => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_run_start",
    data: {}
  });
};
exports.reportRunStart = reportRunStart;
var reportSuiteStart = suite => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_suite_start",
    data: {
      name: suite.title,
      root: !suite.parent,
      start: Date.now()
    }
  });
};
exports.reportSuiteStart = reportSuiteStart;
var reportSuiteEnd = suite => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_suite_end",
    data: {
      root: !suite.parent,
      stop: Date.now()
    }
  });
};
exports.reportSuiteEnd = reportSuiteEnd;
var reportHookStart = hook => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_hook_start",
    data: {
      name: hook.title,
      start: Date.now()
    }
  });
};
exports.reportHookStart = reportHookStart;
var reportHookEnd = hook => {
  var _hook$duration;
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_hook_end",
    data: {
      duration: (_hook$duration = hook.duration) !== null && _hook$duration !== void 0 ? _hook$duration : 0
    }
  });
};
exports.reportHookEnd = reportHookEnd;
var reportTestStart = (test, flag) => {
  var _test$wallClockStarte;
  var x = (0, _utils.getNamesAndLabels)(Cypress.spec, test);
  if (flag) {
    x.labels.push({
      name: "reported",
      value: flag
    });
  }
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_test_start",
    data: _objectSpread(_objectSpread({}, x), {}, {
      start: ((_test$wallClockStarte = test.wallClockStartedAt) === null || _test$wallClockStarte === void 0 ? void 0 : _test$wallClockStarte.getTime()) || Date.now()
    })
  });
  (0, _utils.markTestAsReported)(test);
};
exports.reportTestStart = reportTestStart;
var reportUnfinishedSteps = (status, statusDetails) => {
  var runtimeMessages = (0, _state.getRuntimeMessages)();
  var unfinishedStepsMessages = (0, _sdk.getUnfinishedStepsMessages)(runtimeMessages);
  unfinishedStepsMessages.forEach(() => {
    (0, _state.enqueueRuntimeMessage)({
      type: "step_stop",
      data: {
        stop: Date.now(),
        status,
        statusDetails
      }
    });
  });
};
exports.reportUnfinishedSteps = reportUnfinishedSteps;
var reportTestPass = () => {
  reportUnfinishedSteps(_allureJsCommons.Status.PASSED);
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_test_pass",
    data: {}
  });
};
exports.reportTestPass = reportTestPass;
var reportTestSkip = test => {
  if ((0, _utils.isTestReported)(test)) {
    reportUnfinishedCommand(_allureJsCommons.Status.SKIPPED, {
      message: "The test was skipped before the command was completed"
    });
  } else {
    reportTestStart(test);
  }
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_test_skip",
    data: {}
  });
};
exports.reportTestSkip = reportTestSkip;
var reportCommandStart = command => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_command_start",
    data: {
      name: "Command \"".concat(command.attributes.name, "\""),
      args: command.attributes.args.map(arg => typeof arg === "string" ? arg : JSON.stringify(arg, null, 2)),
      start: Date.now()
    }
  });
};
exports.reportCommandStart = reportCommandStart;
var reportCommandEnd = () => {
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_command_end",
    data: {
      status: _allureJsCommons.Status.PASSED,
      stop: Date.now()
    }
  });
};
exports.reportCommandEnd = reportCommandEnd;
var reportScreenshot = (path, name) => {
  (0, _state.enqueueRuntimeMessage)({
    type: "attachment_path",
    data: {
      path: path,
      name: name || "Screenshot",
      contentType: _allureJsCommons.ContentType.PNG
    }
  });
};
exports.reportScreenshot = reportScreenshot;
var reportUnfinishedCommand = (status, statusDetails) => {
  var runtimeMessages = (0, _state.getRuntimeMessages)();
  var startCommandMessageIdx = runtimeMessages.toReversed().findIndex(_ref => {
    var {
      type
    } = _ref;
    return type === "cypress_command_start";
  });
  var stopCommandMessageIdx = runtimeMessages.toReversed().findIndex(_ref2 => {
    var {
      type
    } = _ref2;
    return type === "cypress_command_end";
  });
  var hasUnfinishedCommand = startCommandMessageIdx > stopCommandMessageIdx;
  var data = {
    status,
    stop: Date.now()
  };
  if (statusDetails) {
    data.statusDetails = statusDetails;
  }
  if (hasUnfinishedCommand) {
    (0, _state.enqueueRuntimeMessage)({
      type: "cypress_command_end",
      data
    });
  }
};
exports.reportUnfinishedCommand = reportUnfinishedCommand;
var reportTestOrHookFail = err => {
  var status = (0, _sdk.getStatusFromError)(err);
  var statusDetails = (0, _sdk.getMessageAndTraceFromError)(err);
  reportUnfinishedCommand(status, statusDetails);
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_fail",
    data: {
      status,
      statusDetails
    }
  });
};
exports.reportTestOrHookFail = reportTestOrHookFail;
var reportTestEnd = test => {
  var _test$duration, _retries;
  (0, _state.enqueueRuntimeMessage)({
    type: "cypress_test_end",
    data: {
      duration: (_test$duration = test.duration) !== null && _test$duration !== void 0 ? _test$duration : 0,
      retries: (_retries = test._retries) !== null && _retries !== void 0 ? _retries : 0
    }
  });
};
exports.reportTestEnd = reportTestEnd;
var forwardDescribeCall = function forwardDescribeCall(target) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  var [title, configOrFn, fn] = args;
  if (typeof fn === "undefined" && typeof configOrFn === "undefined") {
    return target(title);
  } else if (typeof configOrFn === "function") {
    return target(title, configOrFn);
  } else {
    return target(title, configOrFn, fn);
  }
};
var patchDescribe = (incSuiteDepth, decSuiteDepth) => {
  var patchDescribeFn = target => (title, configOrFn, fn) => {
    incSuiteDepth();
    try {
      return forwardDescribeCall(target, title, configOrFn, fn);
    } finally {
      decSuiteDepth();
    }
  };
  var originalDescribeFn = globalThis.describe;
  var patchedDescribe = patchDescribeFn(originalDescribeFn);
  patchedDescribe.only = patchDescribeFn(originalDescribeFn.only);
  patchedDescribe.skip = patchDescribeFn(originalDescribeFn.skip);
  globalThis.describe = patchedDescribe;
};
var createSuiteDepthCounterState = () => {
  var suiteDepth = 0;
  return [() => suiteDepth, () => {
    suiteDepth++;
  }, () => {
    suiteDepth--;
  }];
};
var patchAfter = getSuiteDepth => {
  var originalAfter = globalThis.after;
  var patchedAfter = (nameOrFn, fn) => {
    try {
      return typeof nameOrFn === "string" ? originalAfter(nameOrFn, fn) : originalAfter(nameOrFn);
    } finally {
      if (getSuiteDepth() === 0) {
        originalAfter(_model.ALLURE_REPORT_SYSTEM_HOOK, () => {
          flushRuntimeMessages();
        });
      }
    }
  };
  globalThis.after = patchedAfter;
};

/**
 * Patches the `after` function, to inject an extra `after` hook after each spec-level
 * `after` hook defined by the user.
 */
var enableScopeLevelAfterHookReporting = () => {
  var [getSuiteDepth, incSuiteDepth, decSuiteDepth] = createSuiteDepthCounterState();
  patchDescribe(incSuiteDepth, decSuiteDepth);
  patchAfter(getSuiteDepth);
};
exports.enableScopeLevelAfterHookReporting = enableScopeLevelAfterHookReporting;
//# sourceMappingURL=runtime.js.map