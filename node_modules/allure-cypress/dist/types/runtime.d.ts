import { Status } from "allure-js-commons";
import type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions, StatusDetails } from "allure-js-commons";
import type { TestRuntime } from "allure-js-commons/sdk/runtime";
import type { CypressCommand, CypressTest } from "./model.js";
export declare class AllureCypressTestRuntime implements TestRuntime {
    #private;
    constructor();
    labels(...labels: Label[]): PromiseLike<void>;
    links(...links: Link[]): PromiseLike<void>;
    parameter(name: string, value: string, options?: ParameterOptions): PromiseLike<void>;
    description(markdown: string): PromiseLike<void>;
    descriptionHtml(html: string): PromiseLike<void>;
    displayName(name: string): PromiseLike<void>;
    historyId(value: string): PromiseLike<void>;
    testCaseId(value: string): PromiseLike<void>;
    attachment(name: string, content: string, options: AttachmentOptions): PromiseLike<void>;
    attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, "encoding">): PromiseLike<void>;
    logStep(name: string, status?: Status, error?: Error): Cypress.Chainable<void>;
    step<T = void>(name: string, body: () => T | PromiseLike<T>): Cypress.Chainable<T>;
    stepDisplayName(name: string): PromiseLike<void>;
    stepParameter(name: string, value: string, mode?: ParameterMode): PromiseLike<void>;
    flushMessages: () => PromiseLike<void>;
    flushFinalMessages: () => PromiseLike<void>;
}
export declare const initTestRuntime: () => void;
export declare const getTestRuntime: () => AllureCypressTestRuntime;
export declare const flushRuntimeMessages: () => PromiseLike<void>;
export declare const flushFinalRuntimeMessages: () => PromiseLike<void>;
export declare const reportRunStart: () => void;
export declare const reportSuiteStart: (suite: Mocha.Suite) => void;
export declare const reportSuiteEnd: (suite: Mocha.Suite) => void;
export declare const reportHookStart: (hook: Mocha.Hook) => void;
export declare const reportHookEnd: (hook: Mocha.Hook) => void;
export declare const reportTestStart: (test: CypressTest, flag?: string) => void;
export declare const reportUnfinishedSteps: (status: Status, statusDetails?: StatusDetails) => void;
export declare const reportTestPass: () => void;
export declare const reportTestSkip: (test: CypressTest) => void;
export declare const reportCommandStart: (command: CypressCommand) => void;
export declare const reportCommandEnd: () => void;
export declare const reportScreenshot: (path: string, name: string) => void;
export declare const reportUnfinishedCommand: (status: Status, statusDetails?: StatusDetails) => void;
export declare const reportTestOrHookFail: (err: Error) => void;
export declare const reportTestEnd: (test: CypressTest) => void;
/**
 * Patches the `after` function, to inject an extra `after` hook after each spec-level
 * `after` hook defined by the user.
 */
export declare const enableScopeLevelAfterHookReporting: () => void;
