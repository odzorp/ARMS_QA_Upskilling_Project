{"version":3,"file":"runtime.js","names":["ContentType","Status","getMessageAndTraceFromError","getStatusFromError","getUnfinishedStepsMessages","getGlobalTestRuntime","setGlobalTestRuntime","ALLURE_REPORT_STEP_COMMAND","ALLURE_REPORT_SYSTEM_HOOK","enqueueRuntimeMessage","getRuntimeMessages","setRuntimeMessages","getNamesAndLabels","isTestReported","markTestAsReported","uint8ArrayToBase64","_moveMessagesToAllureCypressTask","WeakMap","_resetMessages","_enqueueMessageAsync","_dequeueAllMessages","AllureCypressTestRuntime","constructor","_defineProperty","_classPrivateFieldGet","call","_classPrivateFieldInitSpec","taskName","messages","length","cy","task","absolutePath","Cypress","spec","absolute","log","Promise","resolve","message","labels","_len","arguments","Array","_key","type","data","links","_len2","_key2","parameter","name","value","options","parameters","_objectSpread","description","markdown","descriptionHtml","html","displayName","historyId","testCaseId","attachment","content","attachmentRawContent","actualEncoding","attachmentContent","encoding","contentType","fileExtension","attachmentFromPath","path","logStep","status","undefined","PASSED","error","wrap","then","start","Date","now","stop","statusDetails","step","body","result","stepDisplayName","stepParameter","mode","initTestRuntime","getTestRuntime","flushRuntimeMessages","flushMessages","flushFinalRuntimeMessages","flushFinalMessages","reportRunStart","reportSuiteStart","suite","title","root","parent","reportSuiteEnd","reportHookStart","hook","reportHookEnd","_hook$duration","duration","reportTestStart","test","flag","_test$wallClockStarte","x","push","wallClockStartedAt","getTime","reportUnfinishedSteps","runtimeMessages","unfinishedStepsMessages","forEach","reportTestPass","reportTestSkip","reportUnfinishedCommand","SKIPPED","reportCommandStart","command","concat","attributes","args","map","arg","JSON","stringify","reportCommandEnd","reportScreenshot","PNG","startCommandMessageIdx","toReversed","findIndex","_ref","stopCommandMessageIdx","_ref2","hasUnfinishedCommand","reportTestOrHookFail","err","reportTestEnd","_test$duration","_retries","retries","forwardDescribeCall","target","_len3","_key3","configOrFn","fn","patchDescribe","incSuiteDepth","decSuiteDepth","patchDescribeFn","originalDescribeFn","globalThis","describe","patchedDescribe","only","skip","createSuiteDepthCounterState","suiteDepth","patchAfter","getSuiteDepth","originalAfter","after","patchedAfter","nameOrFn","enableScopeLevelAfterHookReporting"],"sources":["../../src/runtime.ts"],"sourcesContent":["import { ContentType, Status } from \"allure-js-commons\";\nimport type { AttachmentOptions, Label, Link, ParameterMode, ParameterOptions, StatusDetails } from \"allure-js-commons\";\nimport { getMessageAndTraceFromError, getStatusFromError, getUnfinishedStepsMessages } from \"allure-js-commons/sdk\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport { getGlobalTestRuntime, setGlobalTestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type { TestRuntime } from \"allure-js-commons/sdk/runtime\";\nimport type {\n  CypressCommand,\n  CypressCommandEndMessage,\n  CypressMessage,\n  CypressSuiteFunction,\n  CypressTest,\n} from \"./model.js\";\nimport { ALLURE_REPORT_STEP_COMMAND, ALLURE_REPORT_SYSTEM_HOOK } from \"./model.js\";\nimport { enqueueRuntimeMessage, getRuntimeMessages, setRuntimeMessages } from \"./state.js\";\nimport { getNamesAndLabels, isTestReported, markTestAsReported, uint8ArrayToBase64 } from \"./utils.js\";\n\nexport class AllureCypressTestRuntime implements TestRuntime {\n  constructor() {\n    this.#resetMessages();\n  }\n\n  labels(...labels: Label[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  links(...links: Link[]) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  parameter(name: string, value: string, options?: ParameterOptions) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  description(markdown: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  descriptionHtml(html: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  displayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  historyId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  testCaseId(value: string) {\n    return this.#enqueueMessageAsync({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  // @ts-ignore\n  attachment(name: string, content: string, options: AttachmentOptions) {\n    // @ts-ignore\n    const attachmentRawContent: string | Uint8Array = content?.type === \"Buffer\" ? content.data : content;\n    const actualEncoding = typeof attachmentRawContent === \"string\" ? \"utf8\" : \"base64\";\n    const attachmentContent = uint8ArrayToBase64(attachmentRawContent);\n\n    return this.#enqueueMessageAsync({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: attachmentContent,\n        encoding: actualEncoding,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  attachmentFromPath(name: string, path: string, options: Omit<AttachmentOptions, \"encoding\">) {\n    return this.#enqueueMessageAsync({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n      },\n    });\n  }\n\n  logStep(name: string, status: Status = Status.PASSED, error?: Error) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve();\n      })\n      .then(() => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: status,\n            stop: Date.now(),\n            statusDetails: error ? { ...getMessageAndTraceFromError(error) } : undefined,\n          },\n        });\n      });\n  }\n\n  step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    return cy\n      .wrap(ALLURE_REPORT_STEP_COMMAND, { log: false })\n      .then(() => {\n        this.#enqueueMessageAsync({\n          type: \"step_start\",\n          data: {\n            name,\n            start: Date.now(),\n          },\n        });\n\n        return Cypress.Promise.resolve(body());\n      })\n      .then((result) => {\n        return this.#enqueueMessageAsync({\n          type: \"step_stop\",\n          data: {\n            status: Status.PASSED,\n            stop: Date.now(),\n          },\n        }).then(() => result);\n      });\n  }\n\n  stepDisplayName(name: string) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        name,\n      },\n    });\n  }\n\n  stepParameter(name: string, value: string, mode?: ParameterMode) {\n    return this.#enqueueMessageAsync({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  flushMessages = (): PromiseLike<void> => this.#moveMessagesToAllureCypressTask(\"reportAllureCypressSpecMessages\");\n\n  flushFinalMessages = (): PromiseLike<void> =>\n    this.#moveMessagesToAllureCypressTask(\"reportFinalAllureCypressSpecMessages\");\n\n  #moveMessagesToAllureCypressTask = (taskName: string) => {\n    const messages = this.#dequeueAllMessages();\n    return messages.length\n      ? cy.task(taskName, { absolutePath: Cypress.spec.absolute, messages }, { log: false })\n      : Cypress.Promise.resolve();\n  };\n\n  #resetMessages = () => setRuntimeMessages([]);\n\n  #enqueueMessageAsync = (message: CypressMessage): PromiseLike<void> => {\n    enqueueRuntimeMessage(message);\n    return Cypress.Promise.resolve();\n  };\n\n  #dequeueAllMessages = () => {\n    const messages = getRuntimeMessages();\n    this.#resetMessages();\n    return messages;\n  };\n}\n\nexport const initTestRuntime = () => setGlobalTestRuntime(new AllureCypressTestRuntime() as TestRuntime);\n\nexport const getTestRuntime = () => getGlobalTestRuntime() as AllureCypressTestRuntime;\n\nexport const flushRuntimeMessages = () => getTestRuntime().flushMessages();\n\nexport const flushFinalRuntimeMessages = () => getTestRuntime().flushFinalMessages();\n\nexport const reportRunStart = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_run_start\",\n    data: {},\n  });\n};\n\nexport const reportSuiteStart = (suite: Mocha.Suite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_start\",\n    data: {\n      name: suite.title,\n      root: !suite.parent,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportSuiteEnd = (suite: Mocha.Suite) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_suite_end\",\n    data: {\n      root: !suite.parent,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportHookStart = (hook: Mocha.Hook) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_start\",\n    data: {\n      name: hook.title,\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportHookEnd = (hook: Mocha.Hook) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_hook_end\",\n    data: {\n      duration: hook.duration ?? 0,\n    },\n  });\n};\n\nexport const reportTestStart = (test: CypressTest, flag?: string) => {\n  const x = getNamesAndLabels(Cypress.spec, test);\n  if (flag) {\n    x.labels.push({ name: \"reported\", value: flag });\n  }\n  enqueueRuntimeMessage({\n    type: \"cypress_test_start\",\n    data: {\n      ...x,\n      start: test.wallClockStartedAt?.getTime() || Date.now(),\n    },\n  });\n  markTestAsReported(test);\n};\n\nexport const reportUnfinishedSteps = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages() as RuntimeMessage[];\n  const unfinishedStepsMessages = getUnfinishedStepsMessages(runtimeMessages);\n  unfinishedStepsMessages.forEach(() => {\n    enqueueRuntimeMessage({\n      type: \"step_stop\",\n      data: {\n        stop: Date.now(),\n        status,\n        statusDetails,\n      },\n    });\n  });\n};\n\nexport const reportTestPass = () => {\n  reportUnfinishedSteps(Status.PASSED);\n  enqueueRuntimeMessage({\n    type: \"cypress_test_pass\",\n    data: {},\n  });\n};\n\nexport const reportTestSkip = (test: CypressTest) => {\n  if (isTestReported(test)) {\n    reportUnfinishedCommand(Status.SKIPPED, {\n      message: \"The test was skipped before the command was completed\",\n    });\n  } else {\n    reportTestStart(test);\n  }\n\n  enqueueRuntimeMessage({\n    type: \"cypress_test_skip\",\n    data: {},\n  });\n};\n\nexport const reportCommandStart = (command: CypressCommand) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_start\",\n    data: {\n      name: `Command \"${command.attributes.name}\"`,\n      args: command.attributes.args.map((arg) => (typeof arg === \"string\" ? arg : JSON.stringify(arg, null, 2))),\n      start: Date.now(),\n    },\n  });\n};\n\nexport const reportCommandEnd = () => {\n  enqueueRuntimeMessage({\n    type: \"cypress_command_end\",\n    data: {\n      status: Status.PASSED,\n      stop: Date.now(),\n    },\n  });\n};\n\nexport const reportScreenshot = (path: string, name: string) => {\n  enqueueRuntimeMessage({\n    type: \"attachment_path\",\n    data: {\n      path: path,\n      name: name || \"Screenshot\",\n      contentType: ContentType.PNG,\n    },\n  });\n};\n\nexport const reportUnfinishedCommand = (status: Status, statusDetails?: StatusDetails) => {\n  const runtimeMessages = getRuntimeMessages();\n  const startCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_start\");\n  const stopCommandMessageIdx = runtimeMessages.toReversed().findIndex(({ type }) => type === \"cypress_command_end\");\n  const hasUnfinishedCommand = startCommandMessageIdx > stopCommandMessageIdx;\n\n  const data: CypressCommandEndMessage[\"data\"] = { status, stop: Date.now() };\n  if (statusDetails) {\n    data.statusDetails = statusDetails;\n  }\n\n  if (hasUnfinishedCommand) {\n    enqueueRuntimeMessage({ type: \"cypress_command_end\", data });\n  }\n};\n\nexport const reportTestOrHookFail = (err: Error) => {\n  const status = getStatusFromError(err);\n  const statusDetails = getMessageAndTraceFromError(err);\n\n  reportUnfinishedCommand(status, statusDetails);\n\n  enqueueRuntimeMessage({\n    type: \"cypress_fail\",\n    data: {\n      status,\n      statusDetails,\n    },\n  });\n};\n\nexport const reportTestEnd = (test: CypressTest) => {\n  enqueueRuntimeMessage({\n    type: \"cypress_test_end\",\n    data: {\n      duration: test.duration ?? 0,\n      retries: (test as any)._retries ?? 0,\n    },\n  });\n};\n\nconst forwardDescribeCall = (target: CypressSuiteFunction, ...args: Parameters<CypressSuiteFunction>) => {\n  const [title, configOrFn, fn] = args;\n  if (typeof fn === \"undefined\" && typeof configOrFn === \"undefined\") {\n    return target(title);\n  } else if (typeof configOrFn === \"function\") {\n    return target(title, configOrFn);\n  } else {\n    return target(title, configOrFn, fn);\n  }\n};\n\nconst patchDescribe = (incSuiteDepth: () => void, decSuiteDepth: () => void) => {\n  const patchDescribeFn =\n    (target: CypressSuiteFunction): CypressSuiteFunction =>\n    (title, configOrFn, fn) => {\n      incSuiteDepth();\n      try {\n        return forwardDescribeCall(target, title, configOrFn, fn);\n      } finally {\n        decSuiteDepth();\n      }\n    };\n  const originalDescribeFn: Mocha.SuiteFunction = globalThis.describe;\n  const patchedDescribe = patchDescribeFn(originalDescribeFn) as Mocha.SuiteFunction;\n  patchedDescribe.only = patchDescribeFn(\n    originalDescribeFn.only as CypressSuiteFunction,\n  ) as Mocha.ExclusiveSuiteFunction;\n  patchedDescribe.skip = patchDescribeFn(originalDescribeFn.skip as CypressSuiteFunction) as Mocha.PendingSuiteFunction;\n  globalThis.describe = patchedDescribe;\n};\n\nconst createSuiteDepthCounterState = (): [get: () => number, inc: () => void, dec: () => void] => {\n  let suiteDepth = 0;\n  return [\n    () => suiteDepth,\n    () => {\n      suiteDepth++;\n    },\n    () => {\n      suiteDepth--;\n    },\n  ];\n};\n\nconst patchAfter = (getSuiteDepth: () => number) => {\n  const originalAfter = globalThis.after;\n  const patchedAfter = (nameOrFn: string | Mocha.Func | Mocha.AsyncFunc, fn?: Mocha.Func | Mocha.AsyncFunc): void => {\n    try {\n      return typeof nameOrFn === \"string\" ? originalAfter(nameOrFn, fn) : originalAfter(nameOrFn);\n    } finally {\n      if (getSuiteDepth() === 0) {\n        originalAfter(ALLURE_REPORT_SYSTEM_HOOK, () => {\n          flushRuntimeMessages();\n        });\n      }\n    }\n  };\n  globalThis.after = patchedAfter;\n};\n\n/**\n * Patches the `after` function, to inject an extra `after` hook after each spec-level\n * `after` hook defined by the user.\n */\nexport const enableScopeLevelAfterHookReporting = () => {\n  const [getSuiteDepth, incSuiteDepth, decSuiteDepth] = createSuiteDepthCounterState();\n  patchDescribe(incSuiteDepth, decSuiteDepth);\n  patchAfter(getSuiteDepth);\n};\n"],"mappings":"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","ignoreList":[]}