{"version":3,"file":"reporter.js","names":["path","ContentType","LabelName","Stage","Status","ReporterRuntime","createDefaultWriter","getEnvironmentLabels","getSuiteLabels","parseTestPlan","getHookType","last","_endAllSpecs","WeakMap","_applyAllureCypressMessages","_startRun","_startSuite","_stopSuite","_startHook","_stopHook","_startTest","_failTestOrHook","_passTest","_skipTest","_stopTest","_startCommand","_stopCommand","_applyRuntimeApiMessages","_emitPreviousTestScope","_resolveRootUuid","_attachSpecVideo","_emitRemainingScopes","_initializeSpecContext","AllureCypress","constructor","config","arguments","length","undefined","_defineProperty","Map","on","reportAllureCypressSpecMessages","args","_classPrivateFieldGet","call","reportFinalAllureCypressSpecMessages","endSpec","absolutePath","onAfterSpec","onAfterRun","spec","results","_results$video","absolute","video","endRun","allureRuntime","writeEnvironmentInfo","writeCategoriesDefinitions","specAbsolutePath","cypressVideoPath","specContext","specContextByAbsolutePath","get","delete","_classPrivateFieldInitSpec","keys","_ref","messages","forEach","message","type","context","_ref2","data","name","root","scope","startScope","suiteScopes","push","suiteNames","_ref3","pop","writeScope","_ref4","start","hookPosition","hookScopeType","isEach","isAfterEach","testScope","fixture","startFixture","status","_ref5","duration","fixtureUuid","updateFixture","_fixture$status","PASSED","stopFixture","_ref6","fullName","labels","metadataLabels","test","startTest","stage","RUNNING","LANGUAGE","value","FRAMEWORK","videoScope","_ref7","statusDetails","setError","result","Object","assign","testUuid","updateTest","failed","testResult","SKIPPED","_ref8","retries","parameters","toString","excluded","FINISHED","stopTest","writeTest","_ref9","rootUuid","stepUuid","startStep","map","arg","j","concat","commandSteps","_ref10","stop","updateStep","r","stopStep","applyRuntimeMessages","_context$fixture","shouldVideoBeAttached","videoOnFailOnly","writeAttachment","contentType","MP4","specPathElements","relative","process","cwd","split","sep","specPath","join","package","set","resultsDir","rest","_objectWithoutProperties","_excluded","_objectSpread","writer","getInitialSpecState","initialized","testPlan","enableTestPlan","env","allure","allureCypress","cypressConfig","allureConfig","allureCypressReporter","attachToCypress"],"sources":["../../src/reporter.ts"],"sourcesContent":["import type Cypress from \"cypress\";\nimport path from \"node:path\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage } from \"allure-js-commons/sdk\";\nimport {\n  ReporterRuntime,\n  createDefaultWriter,\n  getEnvironmentLabels,\n  getSuiteLabels,\n  parseTestPlan,\n} from \"allure-js-commons/sdk/reporter\";\nimport type {\n  AllureCypressConfig,\n  AllureCypressTaskArgs,\n  AllureSpecState,\n  CypressCommandEndMessage,\n  CypressCommandStartMessage,\n  CypressFailMessage,\n  CypressHookEndMessage,\n  CypressHookStartMessage,\n  CypressSuiteEndMessage,\n  CypressSuiteStartMessage,\n  CypressTestEndMessage,\n  CypressTestStartMessage,\n  SpecContext,\n} from \"./model.js\";\nimport { getHookType, last } from \"./utils.js\";\n\nexport class AllureCypress {\n  allureRuntime: ReporterRuntime;\n  specContextByAbsolutePath = new Map<string, SpecContext>();\n  videoOnFailOnly: boolean = false;\n\n  constructor(config: AllureCypressConfig = {}) {\n    const { resultsDir, videoOnFailOnly = false, ...rest } = config;\n\n    this.videoOnFailOnly = videoOnFailOnly;\n    this.allureRuntime = new ReporterRuntime({\n      writer: createDefaultWriter({ resultsDir }),\n      ...rest,\n    });\n  }\n\n  attachToCypress = (on: Cypress.PluginEvents) => {\n    on(\"task\", {\n      reportAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        return null;\n      },\n      reportFinalAllureCypressSpecMessages: (args: AllureCypressTaskArgs) => {\n        this.#applyAllureCypressMessages(args);\n        this.endSpec(args.absolutePath);\n        return null;\n      },\n    });\n\n    // Emits the remaining fixtures and writes the video of the spec.\n    // In interactive mode it's invoked through the `reportFinalAllureCypressSpecMessages` task.\n    on(\"after:spec\", this.onAfterSpec);\n\n    // Emits the categories and env info. Doesn't work in interactive mode unless\n    // `experimentalInteractiveRunEvents` is set.\n    on(\"after:run\", this.onAfterRun);\n  };\n\n  /**\n   * Forward the `after:spec` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param spec The first argument of the `after:spec` event.\n   * @param results The second argument of the `after:spec` event.\n   * @example\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:spec\", (spec, results) => {\n   *       allureReporter.onAfterSpec(spec, results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   */\n  onAfterSpec = (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n    this.endSpec(spec.absolute, results.video ?? undefined);\n  };\n\n  /**\n   * Forward the `after:run` event into Allure Cypress using this function if\n   * you need to define your own handler or combine Allure Cypress with other\n   * plugins. More info [here](https://github.com/allure-framework/allure-js/blob/main/packages/allure-cypress/README.md#setupnodeevents-limitations).\n   * @param results The argument of the `after:run` event.\n   * @example\n   * import { defineConfig } from \"cypress\";\n   * import { allureCypress } from \"allure-cypress/reporter\";\n   *\n   * export default defineConfig({\n   *   setupNodeEvents: (on, config) => {\n   *     const allureReporter = allureCypress(on, config);\n   *     on(\"after:run\", (results) => {\n   *       allureReporter.onAfterRun(results);\n   *     });\n   *     return config;\n   *   }\n   *   // ...\n   * });\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onAfterRun = (results: CypressCommandLine.CypressFailedRunResult | CypressCommandLine.CypressRunResult) => {\n    this.endRun();\n  };\n\n  endRun = () => {\n    this.#endAllSpecs();\n    this.allureRuntime.writeEnvironmentInfo();\n    this.allureRuntime.writeCategoriesDefinitions();\n  };\n\n  endSpec = (specAbsolutePath: string, cypressVideoPath?: string) => {\n    const specContext = this.specContextByAbsolutePath.get(specAbsolutePath);\n    if (specContext) {\n      this.#attachSpecVideo(specContext, cypressVideoPath);\n      this.#emitRemainingScopes(specContext);\n      this.specContextByAbsolutePath.delete(specAbsolutePath);\n    }\n  };\n\n  #endAllSpecs = () => {\n    for (const specAbsolutePath of this.specContextByAbsolutePath.keys()) {\n      this.endSpec(specAbsolutePath);\n    }\n  };\n\n  #applyAllureCypressMessages = ({ messages, absolutePath }: AllureCypressTaskArgs) => {\n    messages.forEach((message) => {\n      if (message.type === \"cypress_run_start\") {\n        this.#startRun(absolutePath);\n        return;\n      }\n\n      const context = this.specContextByAbsolutePath.get(absolutePath);\n      if (!context) {\n        return;\n      }\n\n      switch (message.type) {\n        case \"cypress_suite_start\":\n          this.#startSuite(context, message);\n          break;\n        case \"cypress_suite_end\":\n          this.#stopSuite(context, message);\n          break;\n        case \"cypress_hook_start\":\n          this.#startHook(context, message);\n          break;\n        case \"cypress_hook_end\":\n          this.#stopHook(context, message);\n          break;\n        case \"cypress_test_start\":\n          this.#startTest(context, message);\n          break;\n        case \"cypress_test_pass\":\n          this.#passTest(context);\n          break;\n        case \"cypress_fail\":\n          this.#failTestOrHook(context, message);\n          break;\n        case \"cypress_test_skip\":\n          this.#skipTest(context);\n          break;\n        case \"cypress_test_end\":\n          this.#stopTest(context, message);\n          break;\n        case \"cypress_command_start\":\n          this.#startCommand(context, message);\n          break;\n        case \"cypress_command_end\":\n          this.#stopCommand(context, message);\n          break;\n        default:\n          this.#applyRuntimeApiMessages(context, message);\n          break;\n      }\n    });\n  };\n\n  #startRun = (absolutePath: string) => {\n    // This function is executed once on `cypress run`, but it can be executed\n    // multiple times during an interactive session (`cypress open`). Ideally,\n    // in that case, we should remove previous result objects that haven't been\n    // written yet, but it would've required support in ReporterRuntime.\n    // Currently, we're discarding the entire spec context.\n    this.#initializeSpecContext(absolutePath);\n  };\n\n  #startSuite = (context: SpecContext, { data: { name, root } }: CypressSuiteStartMessage) => {\n    const scope = this.allureRuntime.startScope();\n    context.suiteScopes.push(scope);\n    if (!root) {\n      this.#emitPreviousTestScope(context);\n      context.suiteNames.push(name);\n    }\n  };\n\n  #stopSuite = (context: SpecContext, { data: { root } }: CypressSuiteEndMessage) => {\n    this.#emitPreviousTestScope(context);\n    if (!root) {\n      context.suiteNames.pop();\n    }\n    const scope = context.suiteScopes.pop();\n    if (scope) {\n      this.allureRuntime.writeScope(scope);\n    }\n  };\n\n  #startHook = (context: SpecContext, { data: { name, start } }: CypressHookStartMessage) => {\n    const [hookPosition, hookScopeType] = getHookType(name);\n    if (hookPosition) {\n      const isEach = hookScopeType === \"each\";\n      const isAfterEach = hookPosition === \"after\" && isEach;\n      if (!isAfterEach) {\n        this.#emitPreviousTestScope(context);\n      }\n\n      const scope = isEach ? context.testScope : last(context.suiteScopes);\n      if (scope) {\n        context.fixture = this.allureRuntime.startFixture(scope, hookPosition, {\n          name,\n          start,\n          status: undefined,\n        });\n      }\n    }\n  };\n\n  #stopHook = (context: SpecContext, { data: { duration } }: CypressHookEndMessage) => {\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, (fixture) => {\n        fixture.status ??= Status.PASSED;\n      });\n      this.allureRuntime.stopFixture(fixtureUuid, { duration });\n      context.fixture = undefined;\n    }\n  };\n\n  #startTest = (\n    context: SpecContext,\n    { data: { name, fullName, start, labels: metadataLabels } }: CypressTestStartMessage,\n  ) => {\n    this.#emitPreviousTestScope(context);\n    const testScope = this.allureRuntime.startScope();\n    context.testScope = testScope;\n    context.test = this.allureRuntime.startTest(\n      {\n        name,\n        start,\n        fullName,\n        stage: Stage.RUNNING,\n        labels: [\n          {\n            name: LabelName.LANGUAGE,\n            value: \"javascript\",\n          },\n          {\n            name: LabelName.FRAMEWORK,\n            value: \"cypress\",\n          },\n          ...getSuiteLabels(context.suiteNames),\n          ...metadataLabels,\n          ...getEnvironmentLabels(),\n        ],\n      },\n      [context.videoScope, ...context.suiteScopes, testScope],\n    );\n  };\n\n  #failTestOrHook = (context: SpecContext, { data: { status, statusDetails } }: CypressFailMessage) => {\n    const setError = (result: object) => Object.assign(result, { status, statusDetails });\n\n    const fixtureUuid = context.fixture;\n    if (fixtureUuid) {\n      this.allureRuntime.updateFixture(fixtureUuid, setError);\n    }\n\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, setError);\n    }\n\n    context.failed = true;\n  };\n\n  #passTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.PASSED;\n      });\n    }\n  };\n\n  #skipTest = (context: SpecContext) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        testResult.status = Status.SKIPPED;\n        testResult.statusDetails = { message: \"The test was skipped\" };\n      });\n    }\n  };\n\n  #stopTest = (context: SpecContext, { data: { retries, duration } }: CypressTestEndMessage) => {\n    const testUuid = context.test;\n    if (testUuid) {\n      this.allureRuntime.updateTest(testUuid, (testResult) => {\n        if (retries > 0) {\n          testResult.parameters.push({\n            name: \"Retry\",\n            value: retries.toString(),\n            excluded: true,\n          });\n        }\n        testResult.stage = Stage.FINISHED;\n      });\n      this.allureRuntime.stopTest(testUuid, { duration });\n      this.allureRuntime.writeTest(testUuid);\n      context.test = undefined;\n    }\n  };\n\n  #startCommand = (context: SpecContext, { data: { name, args } }: CypressCommandStartMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      const stepUuid = this.allureRuntime.startStep(rootUuid, undefined, {\n        name,\n        parameters: args.map((arg, j) => ({\n          name: `Argument [${j}]`,\n          value: arg,\n        })),\n      });\n      if (stepUuid) {\n        context.commandSteps.push(stepUuid);\n      }\n    }\n  };\n\n  #stopCommand = (context: SpecContext, { data: { status, statusDetails, stop } }: CypressCommandEndMessage) => {\n    const stepUuid = context.commandSteps.pop();\n    if (stepUuid) {\n      this.allureRuntime.updateStep(stepUuid, (r) => {\n        r.status = status;\n\n        if (statusDetails) {\n          r.statusDetails = statusDetails;\n        }\n      });\n      this.allureRuntime.stopStep(stepUuid, { stop });\n    }\n  };\n\n  #applyRuntimeApiMessages = (context: SpecContext, message: RuntimeMessage) => {\n    const rootUuid = this.#resolveRootUuid(context);\n    if (rootUuid) {\n      this.allureRuntime.applyRuntimeMessages(rootUuid, [message]);\n    }\n  };\n\n  /**\n   * We must defer emitting a test's scope until we receive all the test's `afterEach` hooks.\n   * At the same time, we should report it as early as we can. That means we should call this\n   * method in the following cases:\n   * - when an `after` hook of the test starts (`after` hooks are called later than `afterEach`)\n   * - when a `before` or `beforeEach` hook of the next test starts (in case the next test has `before`/`beforeEach` hooks)\n   * - when the next test start (in case the next test doesn't have `before`/`beforeEach` hooks)\n   * - when the test's suite ends (in case the test is the last one in its suite, including the root suite of the spec)\n   * - when a nested suite starts\n   * - when the spec ends\n   */\n  #emitPreviousTestScope = (context: SpecContext) => {\n    const testScope = context.testScope;\n\n    // Checking the test allows us to tell `beforeEach` and `afterEach` apart.\n    // Here we're interested in `afterEach` only.\n    if (!context.test && testScope) {\n      this.allureRuntime.writeScope(testScope);\n      context.testScope = undefined;\n    }\n  };\n\n  #resolveRootUuid = (context: SpecContext) => context.fixture ?? context.test;\n\n  #attachSpecVideo = (context: SpecContext, cypressVideoPath?: string) => {\n    const shouldVideoBeAttached = (!this.videoOnFailOnly || context.failed) && cypressVideoPath;\n    if (shouldVideoBeAttached) {\n      const fixtureUuid = this.allureRuntime.startFixture(context.videoScope, \"after\", {\n        name: \"Cypress video\",\n        status: Status.PASSED,\n        stage: Stage.FINISHED,\n      })!;\n      this.allureRuntime.writeAttachment(fixtureUuid, undefined, \"Cypress video\", cypressVideoPath, {\n        contentType: ContentType.MP4,\n      });\n      this.allureRuntime.stopFixture(fixtureUuid);\n      this.allureRuntime.writeScope(context.videoScope);\n    }\n  };\n\n  #emitRemainingScopes = (context: SpecContext) => {\n    this.#emitPreviousTestScope(context);\n    context.suiteScopes.forEach((scope) => {\n      this.allureRuntime.writeScope(scope);\n    });\n  };\n\n  #initializeSpecContext = (absolutePath: string) => {\n    const specPathElements = path.relative(process.cwd(), absolutePath).split(path.sep);\n    const context = {\n      specPath: specPathElements.join(\"/\"),\n      package: specPathElements.join(\".\"),\n      test: undefined,\n      fixture: undefined,\n      commandSteps: [],\n      videoScope: this.allureRuntime.startScope(),\n      suiteScopes: [],\n      testScope: undefined,\n      suiteNames: [],\n      failed: false,\n    };\n    this.specContextByAbsolutePath.set(absolutePath, context);\n  };\n}\n\nconst getInitialSpecState = (): AllureSpecState => ({\n  initialized: false,\n  messages: [],\n  testPlan: parseTestPlan(),\n});\n\n/**\n * Explicitly enables the selective run feature.\n * @param config The Cypress configuration.\n */\nexport const enableTestPlan = (config: Cypress.PluginConfigOptions) => {\n  config.env.allure = getInitialSpecState();\n  return config;\n};\n\n/**\n * Sets up Allure Cypress.\n * @param on The function used to subscribe to Cypress Node events (it's the first argument of `setupNodeEvents`).\n * @param cypressConfig The Cypress configuration (the second argument of `setupNodeEvents`). If provided, the selective run feature will be enabled.\n * @param allureConfig An Allure configuration object (optional).\n * @example\n * import { defineConfig } from \"cypress\";\n * import { allureCypress } from \"allure-cypress/reporter\";\n *\n * export default defineConfig({\n *   e2e: {\n *     setupNodeEvents: (on, config) => {\n *       allureCypress(on, config, { videoOnFailOnly: true });\n *       return config;\n *     },\n *     // ...\n *   }\n * });\n */\nexport const allureCypress = (\n  on: Cypress.PluginEvents,\n  cypressConfig?: Cypress.PluginConfigOptions,\n  allureConfig?: AllureCypressConfig,\n) => {\n  // Backward compatibility; mainly for JS users who have no type hints\n  if (!allureConfig && cypressConfig && !(\"env\" in cypressConfig)) {\n    allureConfig = cypressConfig as AllureCypressConfig;\n  }\n\n  const allureCypressReporter = new AllureCypress(allureConfig);\n  allureCypressReporter.attachToCypress(on);\n\n  if (cypressConfig && \"env\" in cypressConfig) {\n    enableTestPlan(cypressConfig);\n  }\n\n  return allureCypressReporter;\n};\n"],"mappings":"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","ignoreList":[]}